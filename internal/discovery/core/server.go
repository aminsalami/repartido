package core

import (
	"context"
	"github.com/aminsalami/repartido/internal/discovery"
	"github.com/aminsalami/repartido/internal/discovery/adaptors"
	"github.com/aminsalami/repartido/internal/discovery/grpc"
	"go.uber.org/zap"
	googleGrpc "google.golang.org/grpc"
	"net"
	"time"
)

var logger *zap.Logger
var DServer *DiscoveryServer

// DiscoveryServer implements StatusApiServer generated by protoc-gRPC
type DiscoveryServer struct {
	cacheService *cacheService
	grpc.UnimplementedDiscoveryApiServer
}

func init() {
	logger, _ = zap.NewDevelopment()
}

// -----------------------------------------------------------------

func (s DiscoveryServer) Get(ctx context.Context, req *grpc.StatusRequest) (*grpc.StatusResponse, error) {
	return &grpc.StatusResponse{}, nil
}

func (s DiscoveryServer) List(ctx context.Context, _ *grpc.Empty) (*grpc.StatusListResponse, error) {
	var statuses []*grpc.StatusResponse
	for _, node := range s.cacheService.listNodes() {
		statuses = append(statuses, &grpc.StatusResponse{
			Name:     node.Name,
			Host:     node.Host,
			Port:     node.Port,
			LastPing: node.LastPing,
			RamSize:  node.RamSize,
		})
	}
	return &grpc.StatusListResponse{Statuses: statuses}, nil
}

func (s DiscoveryServer) Register(ctx context.Context, node *grpc.Node) (*grpc.Response, error) {
	// Create a node entity and register it
	cn := discovery.CacheNode{
		Name:     node.Name,
		Host:     node.Host,
		Port:     node.Port,
		LastPing: time.Now().Format(time.RFC3339),
		RamSize:  node.RamSize,
	}
	if err := s.cacheService.registerNode(cn); err != nil {
		return &grpc.Response{Ok: false, Message: err.Error()}, err
	}
	return &grpc.Response{Ok: true, Message: "Done!"}, nil
}

func (s DiscoveryServer) Unregister(ctx context.Context, _ *grpc.Empty) (*grpc.Response, error) {
	return nil, nil
}

func StartServer() {
	l, err := net.Listen("tcp", "localhost:7100")
	if err != nil {
		logger.Fatal(err.Error())
	}

	logger.Info("Starting discovery server on port 7100")
	// Create a new storage adaptor: sqlite
	sqliteStorage := adaptors.NewSqliteCacheStorage()
	s := &DiscoveryServer{
		cacheService: NewCacheService(sqliteStorage),
	}

	grpcServer := googleGrpc.NewServer()
	grpc.RegisterDiscoveryApiServer(grpcServer, s)
	if err := grpcServer.Serve(l); err != nil {
		logger.Fatal(err.Error())
	}
}

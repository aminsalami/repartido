package core

import (
	"context"
	"github.com/aminsalami/repartido/internal/discovery"
	"github.com/aminsalami/repartido/internal/discovery/adaptors"
	grpc "github.com/aminsalami/repartido/proto/discovery"
	"github.com/google/uuid"
	"go.uber.org/zap"
	googleGrpc "google.golang.org/grpc"
	"net"
	"time"
)

var logger = zap.NewExample().Sugar()

// DiscoveryServer implements DiscoveryApiServer generated by protoc-gRPC
type DiscoveryServer struct {
	cacheService *cacheService
	grpc.UnimplementedDiscoveryServer
}

// -----------------------------------------------------------------

func (s DiscoveryServer) Get(ctx context.Context, req *grpc.NodeId) (*grpc.NodeInfo, error) {
	return &grpc.NodeInfo{}, nil
}

// GetRing returns the latest virtual nodes on the ring along with their actual node info.
// Agents request the ring so that they could set up the same ring locally
func (s DiscoveryServer) GetRing(ctx context.Context, _ *grpc.Empty) (*grpc.RingListResponse, error) {
	tmp := make(map[*discovery.CacheNode][]int32)
	for idx, vnode := range s.cacheService.getVirtualNodes() {
		tmp[vnode] = append(tmp[vnode], int32(idx))
	}

	var realNodes []*grpc.RealNode
	for node, vNumberList := range tmp {
		realNodes = append(realNodes, &grpc.RealNode{
			Info: &grpc.NodeInfo{
				Id:       node.Id,
				Name:     node.Name,
				Host:     node.Host,
				Port:     node.Port,
				RamSize:  node.RamSize,
				LastPing: node.LastPing,
			},
			Vnumbers: vNumberList,
		})
	}
	return &grpc.RingListResponse{Nodes: realNodes}, nil
}

func (s DiscoveryServer) Register(ctx context.Context, node *grpc.NodeInfo) (*grpc.Response, error) {
	// Create a node entity and register it
	cn := discovery.CacheNode{
		Id:       node.Host + "--" + uuid.New().String(),
		Name:     node.Name,
		Host:     node.Host,
		Port:     node.Port,
		LastPing: time.Now().Format(time.RFC3339),
		RamSize:  node.RamSize,
	}
	if err := s.cacheService.registerNode(&cn); err != nil {
		return &grpc.Response{Ok: false, Message: err.Error()}, err
	}
	return &grpc.Response{Ok: true, Message: cn.Id}, nil
}

func (s DiscoveryServer) Unregister(ctx context.Context, id *grpc.NodeId) (*grpc.Response, error) {
	return nil, nil
}

func StartServer() {
	l, err := net.Listen("tcp", "localhost:7100")
	if err != nil {
		logger.Fatal(err.Error())
	}

	logger.Info("Starting discovery server on port 7100")
	// Create a new storage adaptor: sqlite
	sqliteStorage := adaptors.NewSqliteCacheStorage()
	s := &DiscoveryServer{
		cacheService: NewCacheService(sqliteStorage),
	}

	grpcServer := googleGrpc.NewServer()
	grpc.RegisterDiscoveryServer(grpcServer, s)
	if err := grpcServer.Serve(l); err != nil {
		logger.Fatal(err.Error())
	}
}

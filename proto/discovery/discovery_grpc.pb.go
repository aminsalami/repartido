// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: discovery.proto

package discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryApiClient is the client API for DiscoveryApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryApiClient interface {
	Get(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetRing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusListResponse, error)
	Register(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error)
	Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type discoveryApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryApiClient(cc grpc.ClientConnInterface) DiscoveryApiClient {
	return &discoveryApiClient{cc}
}

func (c *discoveryApiClient) Get(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/discoveryApi/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryApiClient) GetRing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusListResponse, error) {
	out := new(StatusListResponse)
	err := c.cc.Invoke(ctx, "/discoveryApi/getRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryApiClient) Register(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/discoveryApi/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryApiClient) Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/discoveryApi/unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryApiServer is the server API for DiscoveryApi service.
// All implementations must embed UnimplementedDiscoveryApiServer
// for forward compatibility
type DiscoveryApiServer interface {
	Get(context.Context, *StatusRequest) (*StatusResponse, error)
	GetRing(context.Context, *Empty) (*StatusListResponse, error)
	Register(context.Context, *Node) (*Response, error)
	Unregister(context.Context, *Empty) (*Response, error)
	mustEmbedUnimplementedDiscoveryApiServer()
}

// UnimplementedDiscoveryApiServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryApiServer struct {
}

func (UnimplementedDiscoveryApiServer) Get(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDiscoveryApiServer) GetRing(context.Context, *Empty) (*StatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRing not implemented")
}
func (UnimplementedDiscoveryApiServer) Register(context.Context, *Node) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDiscoveryApiServer) Unregister(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedDiscoveryApiServer) mustEmbedUnimplementedDiscoveryApiServer() {}

// UnsafeDiscoveryApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryApiServer will
// result in compilation errors.
type UnsafeDiscoveryApiServer interface {
	mustEmbedUnimplementedDiscoveryApiServer()
}

func RegisterDiscoveryApiServer(s grpc.ServiceRegistrar, srv DiscoveryApiServer) {
	s.RegisterService(&DiscoveryApi_ServiceDesc, srv)
}

func _DiscoveryApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoveryApi/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryApiServer).Get(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryApi_GetRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryApiServer).GetRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoveryApi/getRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryApiServer).GetRing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoveryApi/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryApiServer).Register(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryApi_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryApiServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoveryApi/unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryApiServer).Unregister(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoveryApi_ServiceDesc is the grpc.ServiceDesc for DiscoveryApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoveryApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discoveryApi",
	HandlerType: (*DiscoveryApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _DiscoveryApi_Get_Handler,
		},
		{
			MethodName: "getRing",
			Handler:    _DiscoveryApi_GetRing_Handler,
		},
		{
			MethodName: "register",
			Handler:    _DiscoveryApi_Register_Handler,
		},
		{
			MethodName: "unregister",
			Handler:    _DiscoveryApi_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandApiClient is the client API for CommandApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandApiClient interface {
	Get(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	Set(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
	Del(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
}

type commandApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandApiClient(cc grpc.ClientConnInterface) CommandApiClient {
	return &commandApiClient{cc}
}

func (c *commandApiClient) Get(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/commandApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandApiClient) Set(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/commandApi/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandApiClient) Del(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/commandApi/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandApiServer is the server API for CommandApi service.
// All implementations must embed UnimplementedCommandApiServer
// for forward compatibility
type CommandApiServer interface {
	Get(context.Context, *Command) (*CommandResponse, error)
	Set(context.Context, *Command) (*CommandResponse, error)
	Del(context.Context, *Command) (*CommandResponse, error)
	mustEmbedUnimplementedCommandApiServer()
}

// UnimplementedCommandApiServer must be embedded to have forward compatible implementations.
type UnimplementedCommandApiServer struct {
}

func (UnimplementedCommandApiServer) Get(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommandApiServer) Set(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCommandApiServer) Del(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedCommandApiServer) mustEmbedUnimplementedCommandApiServer() {}

// UnsafeCommandApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandApiServer will
// result in compilation errors.
type UnsafeCommandApiServer interface {
	mustEmbedUnimplementedCommandApiServer()
}

func RegisterCommandApiServer(s grpc.ServiceRegistrar, srv CommandApiServer) {
	s.RegisterService(&CommandApi_ServiceDesc, srv)
}

func _CommandApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandApiServer).Get(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandApi_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandApiServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandApi/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandApiServer).Set(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandApi_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandApiServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandApi/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandApiServer).Del(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandApi_ServiceDesc is the grpc.ServiceDesc for CommandApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commandApi",
	HandlerType: (*CommandApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CommandApi_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _CommandApi_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _CommandApi_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
